# -*- mode: ruby -*-
# vi: set ft=ruby :

# MS/ IMPORTANT NOTES:
# - meteor apps won't work in /vagrant directory
# - initial "downloading meteor-tool" might take a long time and it will look like it's stuck
#   but if the CPU and RAM usage of the virtual machine is high, it's doing ok
 


# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "ubuntu/xenial64"
  config.vm.box_version = "20171011.0.0"
 
  config.vm.hostname = "meteor-serv"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 22, host: 2222, host_ip: "127.0.0.1"
  # config.vm.network "forwarded_port", guest: 3000, host: 3000, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  config.vm.network "public_network", ip: "192.168.1.220", bridge: "eth1"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    # vb.gui = true
  
    # Customize the amount of memory on the VM:
    # MS: NOTE: 1024 is not enough for meteor update
    vb.memory = "1024"
    vb.cpus = "2"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    pass=vagrantrootdeploy
    echo "setting root password to $pass"
    echo -ne "$pass\n$pass\n" | sudo passwd root
    
    echo "modyfing /etc/ssh/sshd_config to allow root login via ssh"
    sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bak
    sudo sh -c "cat /etc/ssh/sshd_config.bak | sed 's/prohibit-password/yes # prohibit-password # mup edit/' > /etc/ssh/sshd_config"
    
    echo "done, backup file saved as /etc/ssh/sshd_config.bak"
    echo "restarting sshd"
    sudo service ssh restart
  
    echo "done, now you should be able to deploy your app here"
    addr=$( ifconfig | grep "inet "  | egrep -v "(172|10|127)\." | awk '{ print $2 }')
    echo "machine $addr"
  SHELL
end
